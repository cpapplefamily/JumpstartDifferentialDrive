// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.revrobotics.CANSparkBase.IdleMode;
import com.revrobotics.CANSparkLowLevel;
import com.revrobotics.CANSparkMax;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveTrain extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private CANSparkMax leftMotorLeader;
private CANSparkMax rightMotorLeader;
private DifferentialDrive differentialDrive1;
private CANSparkMax leftMotorFollower;
private CANSparkMax rightMotorFollower;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public DriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
leftMotorLeader = new CANSparkMax(14, CANSparkLowLevel.MotorType.kBrushless);
 
 leftMotorLeader.restoreFactoryDefaults();  
leftMotorLeader.setInverted(false);
leftMotorLeader.setIdleMode(IdleMode.kCoast);
leftMotorLeader.burnFlash();
  

rightMotorLeader = new CANSparkMax(1, CANSparkLowLevel.MotorType.kBrushless);
 
 rightMotorLeader.restoreFactoryDefaults();  
rightMotorLeader.setInverted(true);
rightMotorLeader.setIdleMode(IdleMode.kCoast);
rightMotorLeader.burnFlash();
  

differentialDrive1 = new DifferentialDrive(leftMotorLeader, rightMotorLeader);
 addChild("Differential Drive 1",differentialDrive1);
 differentialDrive1.setSafetyEnabled(true);
differentialDrive1.setExpiration(0.1);
differentialDrive1.setMaxOutput(1.0);


leftMotorFollower = new CANSparkMax(13, CANSparkLowLevel.MotorType.kBrushless);
 
 leftMotorFollower.restoreFactoryDefaults();  
leftMotorFollower.setInverted(false);
leftMotorFollower.setIdleMode(IdleMode.kCoast);
leftMotorFollower.burnFlash();
  

rightMotorFollower = new CANSparkMax(2, CANSparkLowLevel.MotorType.kBrushless);
 
 rightMotorFollower.restoreFactoryDefaults();  
rightMotorFollower.setInverted(false);
rightMotorFollower.setIdleMode(IdleMode.kCoast);
rightMotorFollower.burnFlash();
  


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void myDrive(double speed,double turn){
        differentialDrive1.arcadeDrive(speed, turn);
    }
}

